{
    "irradiance.TimeSuite.time_aoi": {
        "code": "class TimeSuite:\n    def time_aoi(self):\n        irradiance.aoi(self.tilt, self.azimuth,\n                       self.solar_position.apparent_zenith,\n                       self.solar_position.azimuth)\n\n    def setup(self):\n        self.times = pd.date_range(start='20180601', freq='1min',\n                                   periods=14400)\n        self.days = pd.date_range(start='20180601', freq='d', periods=30)\n        self.location = location.Location(40, -80)\n        self.solar_position = self.location.get_solarposition(self.times)\n        self.clearsky_irradiance = self.location.get_clearsky(self.times)\n        self.tilt = 20\n        self.azimuth = 180\n        self.aoi = irradiance.aoi(self.tilt, self.azimuth,\n                                  self.solar_position.apparent_zenith,\n                                  self.solar_position.azimuth)",
        "min_run_count": 2,
        "name": "irradiance.TimeSuite.time_aoi",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "50965af4170b77711b9c314a5cbd5ef7f4726d5ee67d2921d91eed75e0f1f9b4",
        "warmup_time": -1
    },
    "irradiance.TimeSuite.time_aoi_projection": {
        "code": "class TimeSuite:\n    def time_aoi_projection(self):\n        irradiance.aoi(self.tilt, self.azimuth,\n                       self.solar_position.apparent_zenith,\n                       self.solar_position.azimuth)\n\n    def setup(self):\n        self.times = pd.date_range(start='20180601', freq='1min',\n                                   periods=14400)\n        self.days = pd.date_range(start='20180601', freq='d', periods=30)\n        self.location = location.Location(40, -80)\n        self.solar_position = self.location.get_solarposition(self.times)\n        self.clearsky_irradiance = self.location.get_clearsky(self.times)\n        self.tilt = 20\n        self.azimuth = 180\n        self.aoi = irradiance.aoi(self.tilt, self.azimuth,\n                                  self.solar_position.apparent_zenith,\n                                  self.solar_position.azimuth)",
        "min_run_count": 2,
        "name": "irradiance.TimeSuite.time_aoi_projection",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "3de6c1879aac4d828a4a6f1a8e219860b96dc8c9d8ebe81810af62caee5f63b7",
        "warmup_time": -1
    },
    "irradiance.TimeSuite.time_dirindex": {
        "code": "class TimeSuite:\n    def time_dirindex(self):\n        irradiance.dirindex(self.clearsky_irradiance.ghi,\n                            self.clearsky_irradiance.ghi,\n                            self.clearsky_irradiance.dni,\n                            self.solar_position.apparent_zenith,\n                            self.times)\n\n    def setup(self):\n        self.times = pd.date_range(start='20180601', freq='1min',\n                                   periods=14400)\n        self.days = pd.date_range(start='20180601', freq='d', periods=30)\n        self.location = location.Location(40, -80)\n        self.solar_position = self.location.get_solarposition(self.times)\n        self.clearsky_irradiance = self.location.get_clearsky(self.times)\n        self.tilt = 20\n        self.azimuth = 180\n        self.aoi = irradiance.aoi(self.tilt, self.azimuth,\n                                  self.solar_position.apparent_zenith,\n                                  self.solar_position.azimuth)",
        "min_run_count": 2,
        "name": "irradiance.TimeSuite.time_dirindex",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "fa5d74f22cabd99f38270652def1a89ab651c04b807a5e7f5900c3306d1984e2",
        "warmup_time": -1
    },
    "irradiance.TimeSuite.time_dirint": {
        "code": "class TimeSuite:\n    def time_dirint(self):\n        irradiance.dirint(self.clearsky_irradiance.ghi,\n                          self.solar_position.apparent_zenith,\n                          self.times)\n\n    def setup(self):\n        self.times = pd.date_range(start='20180601', freq='1min',\n                                   periods=14400)\n        self.days = pd.date_range(start='20180601', freq='d', periods=30)\n        self.location = location.Location(40, -80)\n        self.solar_position = self.location.get_solarposition(self.times)\n        self.clearsky_irradiance = self.location.get_clearsky(self.times)\n        self.tilt = 20\n        self.azimuth = 180\n        self.aoi = irradiance.aoi(self.tilt, self.azimuth,\n                                  self.solar_position.apparent_zenith,\n                                  self.solar_position.azimuth)",
        "min_run_count": 2,
        "name": "irradiance.TimeSuite.time_dirint",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "78b49c7c69d2a905dd0c8198ae442d474ef8657a059c97125095a629baf3d92b",
        "warmup_time": -1
    },
    "irradiance.TimeSuite.time_disc": {
        "code": "class TimeSuite:\n    def time_disc(self):\n        irradiance.disc(self.clearsky_irradiance.ghi,\n                        self.solar_position.apparent_zenith,\n                        self.times)\n\n    def setup(self):\n        self.times = pd.date_range(start='20180601', freq='1min',\n                                   periods=14400)\n        self.days = pd.date_range(start='20180601', freq='d', periods=30)\n        self.location = location.Location(40, -80)\n        self.solar_position = self.location.get_solarposition(self.times)\n        self.clearsky_irradiance = self.location.get_clearsky(self.times)\n        self.tilt = 20\n        self.azimuth = 180\n        self.aoi = irradiance.aoi(self.tilt, self.azimuth,\n                                  self.solar_position.apparent_zenith,\n                                  self.solar_position.azimuth)",
        "min_run_count": 2,
        "name": "irradiance.TimeSuite.time_disc",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "9ad866653a5d1d13bc2047a224a2cdf0a0435201882da83a03e924138db776d4",
        "warmup_time": -1
    },
    "irradiance.TimeSuite.time_erbs": {
        "code": "class TimeSuite:\n    def time_erbs(self):\n        irradiance.erbs(self.clearsky_irradiance.ghi,\n                        self.solar_position.apparent_zenith,\n                        self.times)\n\n    def setup(self):\n        self.times = pd.date_range(start='20180601', freq='1min',\n                                   periods=14400)\n        self.days = pd.date_range(start='20180601', freq='d', periods=30)\n        self.location = location.Location(40, -80)\n        self.solar_position = self.location.get_solarposition(self.times)\n        self.clearsky_irradiance = self.location.get_clearsky(self.times)\n        self.tilt = 20\n        self.azimuth = 180\n        self.aoi = irradiance.aoi(self.tilt, self.azimuth,\n                                  self.solar_position.apparent_zenith,\n                                  self.solar_position.azimuth)",
        "min_run_count": 2,
        "name": "irradiance.TimeSuite.time_erbs",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "5941e5a1e183b9f8928346a117bc11a816a127584f4239dc7912b4f706d639d3",
        "warmup_time": -1
    },
    "irradiance.TimeSuite.time_get_extra_radiation": {
        "code": "class TimeSuite:\n    def time_get_extra_radiation(self):\n        irradiance.get_extra_radiation(self.days)\n\n    def setup(self):\n        self.times = pd.date_range(start='20180601', freq='1min',\n                                   periods=14400)\n        self.days = pd.date_range(start='20180601', freq='d', periods=30)\n        self.location = location.Location(40, -80)\n        self.solar_position = self.location.get_solarposition(self.times)\n        self.clearsky_irradiance = self.location.get_clearsky(self.times)\n        self.tilt = 20\n        self.azimuth = 180\n        self.aoi = irradiance.aoi(self.tilt, self.azimuth,\n                                  self.solar_position.apparent_zenith,\n                                  self.solar_position.azimuth)",
        "min_run_count": 2,
        "name": "irradiance.TimeSuite.time_get_extra_radiation",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "5e81a7bd20b140c57341ab396ade6d5b3dc924a58abd2050f8349f8f007acb34",
        "warmup_time": -1
    },
    "irradiance.TimeSuite.time_get_ground_diffuse": {
        "code": "class TimeSuite:\n    def time_get_ground_diffuse(self):\n        irradiance.get_ground_diffuse(self.tilt, self.clearsky_irradiance.ghi)\n\n    def setup(self):\n        self.times = pd.date_range(start='20180601', freq='1min',\n                                   periods=14400)\n        self.days = pd.date_range(start='20180601', freq='d', periods=30)\n        self.location = location.Location(40, -80)\n        self.solar_position = self.location.get_solarposition(self.times)\n        self.clearsky_irradiance = self.location.get_clearsky(self.times)\n        self.tilt = 20\n        self.azimuth = 180\n        self.aoi = irradiance.aoi(self.tilt, self.azimuth,\n                                  self.solar_position.apparent_zenith,\n                                  self.solar_position.azimuth)",
        "min_run_count": 2,
        "name": "irradiance.TimeSuite.time_get_ground_diffuse",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "8931595a6fee7a0e144ce1cbe63cf8148a3d014c2a211a4c73488789359c1efb",
        "warmup_time": -1
    },
    "irradiance.TimeSuite.time_get_total_irradiance": {
        "code": "class TimeSuite:\n    def time_get_total_irradiance(self):\n        irradiance.get_total_irradiance(self.tilt, self.azimuth,\n                                        self.solar_position.apparent_zenith,\n                                        self.solar_position.azimuth,\n                                        self.clearsky_irradiance.dni,\n                                        self.clearsky_irradiance.ghi,\n                                        self.clearsky_irradiance.dhi)\n\n    def setup(self):\n        self.times = pd.date_range(start='20180601', freq='1min',\n                                   periods=14400)\n        self.days = pd.date_range(start='20180601', freq='d', periods=30)\n        self.location = location.Location(40, -80)\n        self.solar_position = self.location.get_solarposition(self.times)\n        self.clearsky_irradiance = self.location.get_clearsky(self.times)\n        self.tilt = 20\n        self.azimuth = 180\n        self.aoi = irradiance.aoi(self.tilt, self.azimuth,\n                                  self.solar_position.apparent_zenith,\n                                  self.solar_position.azimuth)",
        "min_run_count": 2,
        "name": "irradiance.TimeSuite.time_get_total_irradiance",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "30a79c4c9c67ca1f0b85f794cf19c2cb68ef51fdc8182397d3236e7b2a3483f1",
        "warmup_time": -1
    },
    "location.TimeSuite.time_location_get_airmass": {
        "code": "class TimeSuite:\n    def time_location_get_airmass(self):\n        self.location.get_airmass(solar_position=self.solar_position)\n\n    def setup(self):\n        self.location = pvlib.location.Location(32, -110, altitude=700,\n                                                tz='Etc/GMT+7')\n        self.times = pd.date_range(start='20180601', freq='3min',\n                                   periods=1440)\n        self.days = pd.date_range(start='20180101', freq='d', periods=365,\n                                  tz=self.location.tz)\n        self.solar_position = self.location.get_solarposition(self.times)",
        "min_run_count": 2,
        "name": "location.TimeSuite.time_location_get_airmass",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "896610ba2c4b111cf70e42ac4e9a71eef87f5ee4fb795926c229a0b09055789d",
        "warmup_time": -1
    },
    "location.TimeSuite.time_location_get_clearsky": {
        "code": "class TimeSuite:\n    def time_location_get_clearsky(self):\n        self.location.get_clearsky(times=self.times,\n                                   solar_position=self.solar_position)\n\n    def setup(self):\n        self.location = pvlib.location.Location(32, -110, altitude=700,\n                                                tz='Etc/GMT+7')\n        self.times = pd.date_range(start='20180601', freq='3min',\n                                   periods=1440)\n        self.days = pd.date_range(start='20180101', freq='d', periods=365,\n                                  tz=self.location.tz)\n        self.solar_position = self.location.get_solarposition(self.times)",
        "min_run_count": 2,
        "name": "location.TimeSuite.time_location_get_clearsky",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "7089fc94cfbb08e6ef45f59f9f65765d35e885fe53ab4b4b10fa64b29bea1a22",
        "warmup_time": -1
    },
    "location.TimeSuite.time_location_get_solarposition": {
        "code": "class TimeSuite:\n    def time_location_get_solarposition(self):\n        self.location.get_solarposition(times=self.times)\n\n    def setup(self):\n        self.location = pvlib.location.Location(32, -110, altitude=700,\n                                                tz='Etc/GMT+7')\n        self.times = pd.date_range(start='20180601', freq='3min',\n                                   periods=1440)\n        self.days = pd.date_range(start='20180101', freq='d', periods=365,\n                                  tz=self.location.tz)\n        self.solar_position = self.location.get_solarposition(self.times)",
        "min_run_count": 2,
        "name": "location.TimeSuite.time_location_get_solarposition",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "f440de0b3fdb1a65ab833e7c8060f1ef019af5ff8c979e098cc668973d1720eb",
        "warmup_time": -1
    },
    "location.TimeSuite.time_location_get_sun_rise_set_transit_pyephem": {
        "code": "class TimeSuite:\n    def time_location_get_sun_rise_set_transit_pyephem(self):\n        self.location.get_sun_rise_set_transit(times=self.days,\n                                               method='pyephem')\n\n    def setup(self):\n        self.location = pvlib.location.Location(32, -110, altitude=700,\n                                                tz='Etc/GMT+7')\n        self.times = pd.date_range(start='20180601', freq='3min',\n                                   periods=1440)\n        self.days = pd.date_range(start='20180101', freq='d', periods=365,\n                                  tz=self.location.tz)\n        self.solar_position = self.location.get_solarposition(self.times)",
        "min_run_count": 2,
        "name": "location.TimeSuite.time_location_get_sun_rise_set_transit_pyephem",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "d85ac70306cccd8264d972f2983976f6cc187b4d295be3241d0d8e28a21da9f8",
        "warmup_time": -1
    },
    "location.TimeSuite.time_location_get_sun_rise_set_transit_spa": {
        "code": "class TimeSuite:\n    def time_location_get_sun_rise_set_transit_spa(self):\n        self.location.get_sun_rise_set_transit(times=self.days,\n                                               method='spa')\n\n    def setup(self):\n        self.location = pvlib.location.Location(32, -110, altitude=700,\n                                                tz='Etc/GMT+7')\n        self.times = pd.date_range(start='20180601', freq='3min',\n                                   periods=1440)\n        self.days = pd.date_range(start='20180101', freq='d', periods=365,\n                                  tz=self.location.tz)\n        self.solar_position = self.location.get_solarposition(self.times)",
        "min_run_count": 2,
        "name": "location.TimeSuite.time_location_get_sun_rise_set_transit_spa",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "c7662d38aefb843bc75f8f5f31e35eb206646825fe0ed7f68fde84657ec0a05d",
        "warmup_time": -1
    },
    "solarposition.TimeSuite.time_ephemeris": {
        "code": "class TimeSuite:\n    def time_ephemeris(self):\n        solarposition.ephemeris(self.times, self.lat, self.lon)\n\n    def setup(self):\n        self.times = pd.date_range(start='20180601', freq='1min',\n                                   periods=14400)\n        self.times_localized = self.times.tz_localize('Etc/GMT+7')\n        self.lat = 35.1\n        self.lon = -106.6",
        "min_run_count": 2,
        "name": "solarposition.TimeSuite.time_ephemeris",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "d720557975548221137d8479573475421266842842eb418904fe9aebfc36ff37",
        "warmup_time": -1
    },
    "solarposition.TimeSuite.time_ephemeris_localized": {
        "code": "class TimeSuite:\n    def time_ephemeris_localized(self):\n        solarposition.ephemeris(self.times_localized, self.lat, self.lon)\n\n    def setup(self):\n        self.times = pd.date_range(start='20180601', freq='1min',\n                                   periods=14400)\n        self.times_localized = self.times.tz_localize('Etc/GMT+7')\n        self.lat = 35.1\n        self.lon = -106.6",
        "min_run_count": 2,
        "name": "solarposition.TimeSuite.time_ephemeris_localized",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "ec8291a048071446aed78a29bac9a0075431eafe0cd22b17bf5fc478abb4287a",
        "warmup_time": -1
    },
    "solarposition.TimeSuite.time_nrel_earthsun_distance": {
        "code": "class TimeSuite:\n    def time_nrel_earthsun_distance(self):\n        solarposition.nrel_earthsun_distance(self.times_localized)\n\n    def setup(self):\n        self.times = pd.date_range(start='20180601', freq='1min',\n                                   periods=14400)\n        self.times_localized = self.times.tz_localize('Etc/GMT+7')\n        self.lat = 35.1\n        self.lon = -106.6",
        "min_run_count": 2,
        "name": "solarposition.TimeSuite.time_nrel_earthsun_distance",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "a7afedbc2824ae6ab44f88964a7b0b305b3747945a62265c512d5eb325a42d14",
        "warmup_time": -1
    },
    "solarposition.TimeSuite.time_spa_python": {
        "code": "class TimeSuite:\n    def time_spa_python(self):\n        solarposition.spa_python(self.times_localized[::5], self.lat, self.lon)\n\n    def setup(self):\n        self.times = pd.date_range(start='20180601', freq='1min',\n                                   periods=14400)\n        self.times_localized = self.times.tz_localize('Etc/GMT+7')\n        self.lat = 35.1\n        self.lon = -106.6",
        "min_run_count": 2,
        "name": "solarposition.TimeSuite.time_spa_python",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "19a86b9c218f465e892dc2d8d9ae59458723627324f1b9c6f0cdd6f76c0edb82",
        "warmup_time": -1
    },
    "solarposition.TimeSuite.time_sun_rise_set_transit_spa": {
        "code": "class TimeSuite:\n    def time_sun_rise_set_transit_spa(self):\n        sun_rise_set_transit_spa(self.times_localized[::30],\n                                 self.lat, self.lon)\n\n    def setup(self):\n        self.times = pd.date_range(start='20180601', freq='1min',\n                                   periods=14400)\n        self.times_localized = self.times.tz_localize('Etc/GMT+7')\n        self.lat = 35.1\n        self.lon = -106.6",
        "min_run_count": 2,
        "name": "solarposition.TimeSuite.time_sun_rise_set_transit_spa",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "9ceddba550136d49b3aefc735bc9d3e512144ac2b5c62ffe82a974e08ff86a47",
        "warmup_time": -1
    },
    "tracking.TimeSuite.time_singleaxis": {
        "code": "class TimeSuite:\n    def time_singleaxis(self):\n        with np.errstate(invalid='ignore'):\n            tracking.singleaxis(self.solar_position.apparent_zenith,\n                                self.solar_position.azimuth,\n                                axis_tilt=0,\n                                axis_azimuth=0,\n                                max_angle=60,\n                                backtrack=True,\n                                gcr=0.45)\n\n    def setup(self):\n        self.times = pd.date_range(start='20180601', freq='1min',\n                                   periods=14400)\n        self.lat = 35.1\n        self.lon = -106.6\n        self.solar_position = solarposition.get_solarposition(self.times,\n                                                              self.lat,\n                                                              self.lon)\n        self.tracker = tracking.SingleAxisTracker()",
        "min_run_count": 2,
        "name": "tracking.TimeSuite.time_singleaxis",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "920c93b8db310d5d167270dad8d64d445c40ec141868c5d9cffd1ef988e65e3e",
        "warmup_time": -1
    },
    "tracking.TimeSuite.time_tracker_singleaxis": {
        "code": "class TimeSuite:\n    def time_tracker_singleaxis(self):\n        with np.errstate(invalid='ignore'):\n            self.tracker.singleaxis(self.solar_position.apparent_zenith,\n                                    self.solar_position.azimuth)\n\n    def setup(self):\n        self.times = pd.date_range(start='20180601', freq='1min',\n                                   periods=14400)\n        self.lat = 35.1\n        self.lon = -106.6\n        self.solar_position = solarposition.get_solarposition(self.times,\n                                                              self.lat,\n                                                              self.lon)\n        self.tracker = tracking.SingleAxisTracker()",
        "min_run_count": 2,
        "name": "tracking.TimeSuite.time_tracker_singleaxis",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "4c44d4a1617113032d4ae5a877846a00e223ef30a3c648b7a3bc0cdad8ac2e57",
        "warmup_time": -1
    },
    "version": 2
}